# Disclaimer: This algorithm is a proof of concept and exemplifies the
# mechanics of creating a strategy based on certain indicators, candle
# patterns, and/or statistical models. This strategy is currently a work
# in progress and we recommend varying the parameters of this strategy
# and/or building on top of it before deploying it to the live markets
# (you should always ensure that backtests indicate a profitable strategy
# before deploying any strategy live).

# youtube: biSv6994rpY

"""
## Strategy summary:
Buy when price change over `NDAYS` is higher than
`BUY_THRESH`.

Sell when price change over `NDAYS` is lower than
`SELL_THRESH`.

For example, if `BUY_THRESH = 0.02`, script will buy if the price change
over `NDAYS` is higher than `2%` or `0.02`).

`FREEZE_PERIOD` - Do not buy or sell until `FREEZE_PERIOD`
periods have passed since the last buy or sell (in this case,
1 period = 1 day).

That's it!
"""


# Imports
import pandas as pd
import numpy as np
from cryzen import plot, param
from catalyst.api import order, get_open_orders, cancel_order


# Exchange, symbol to trade, and starting capital
EXCHANGE_NAME  = param('crix', type='dropdown', values='crix')
SYMBOL_NAME    = param("eth_btc", type='dropdown', values=['ltc_btc', 'eth_btc', 'xrp_btc', 'xlm_btc', 'bch_btc'])
CAPITAL_BASE   = param(1, type='num', values=[0.1,.1,10]) # Units in `QUOTE_CURRENCY` below
QUOTE_CURRENCY = 'btc'


# Trading frequency, and time range to backtest over
# choices: 'minute', or 'daily'
DATA_FREQUENCY = param('daily', type='dropdown', values=['daily'])
BACKTESTING_RANGE = param("2019 - partial", type='dropdown', values=['2018 - all', '2019 - partial'])


# Map BACKTESTING_RANGE to actual start and end times
if BACKTESTING_RANGE == '2018 - all':
    # For 2018
    START_TIME = pd.to_datetime('2018-01-01', utc=True)
    END_TIME = pd.to_datetime('2018-12-31', utc=True)
elif BACKTESTING_RANGE == '2019 - partial':
    # For 2019
    START_TIME = pd.to_datetime('2019-01-01', utc=True)
    END_TIME = pd.to_datetime('2019-12-31', utc=True)


# Strategy Parameters
NDAYS = param(7, type='num', values=[2, 1, 30])
BUY_THRESH = param(0, type='num', values=[-1, 0.005, 1])
SELL_THRESH = param(0, type='num', values=[-1, 0.005, 1])
FREEZE_PERIOD = param(0, type='num', values=[0, 1, 7])


# Internal Parameters
BOUGHT = False
FREEZE_COUNT = 0


# `initialize` runs once before the start of a strategy
# (for both backtests and live deployments).
#
# `context` is a shared variable between the various
# functions in this script.
def initialize(context):
    # `context.asset` can be accessed from other
    # functions involved in this strategy such as `handle_data`
    # Feel free to define `context.anything = whatever`
    context.asset = symbol(SYMBOL_NAME)


# `handle_data` runs every time there is a new complete candle
# (contained in the `data` argument).
#
# If `DATA_FREQUENCY` above is set to 'minute', `handle_data` will
# get called at the end of every minute; if it is set to 'daily'
# it will get called at the end of every day (UTC time).
def handle_data(context, data):
    
    global BOUGHT, BUY_THRESH, SELL_THRESH, FREEZE_PERIOD, FREEZE_COUNT
    
    # Get data
    historical_data = data.history(
        context.asset,
        bar_count=NDAYS,
        fields=['price', 'open', 'high', 'low', 'close', 'volume'],
        frequency='1D') # frequency can be '1D' for daily, or
                        # '1T' for minute
    
    # Calculate indicators
    current_close  = historical_data['close'][-1]
    earliest_close = historical_data['close'][0]
    
    net_change = (current_close - earliest_close) / earliest_close
    plot(context, net_change=net_change)
    
    # Buy & Sell
    if (net_change > BUY_THRESH) and (not BOUGHT) and (FREEZE_COUNT <= 0):
        order_target_percent(context.asset, 1)
        FREEZE_COUNT = FREEZE_PERIOD
        BOUGHT = True
        
        
    elif (net_change < SELL_THRESH) and BOUGHT and (FREEZE_COUNT <= 0):
        order_target_percent(context.asset, 0)
        FREEZE_COUNT = FREEZE_PERIOD
        BOUGHT = False
        
    else:
        
        FREEZE_COUNT -= 1


# `analyze_live` runs on every iteration of a
# live algorithm (does not run for backtests).
def analyze_live(context, results):
    pass


# `analyze` runs at the end of a job
def analyze(context, results):
    print("Runs after job ends")
    
